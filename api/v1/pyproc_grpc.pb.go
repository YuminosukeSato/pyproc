// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/v1/pyproc.proto

package pyprocv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PyProcService_Call_FullMethodName        = "/pyproc.v1.PyProcService/Call"
	PyProcService_HealthCheck_FullMethodName = "/pyproc.v1.PyProcService/HealthCheck"
)

// PyProcServiceClient is the client API for PyProcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PyProcService defines the gRPC service for Python worker communication
type PyProcServiceClient interface {
	// Generic call for backward compatibility with existing JSON protocol
	Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error)
	// Health check RPC for worker health monitoring
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type pyProcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPyProcServiceClient(cc grpc.ClientConnInterface) PyProcServiceClient {
	return &pyProcServiceClient{cc}
}

func (c *pyProcServiceClient) Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CallResponse)
	err := c.cc.Invoke(ctx, PyProcService_Call_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pyProcServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, PyProcService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PyProcServiceServer is the server API for PyProcService service.
// All implementations must embed UnimplementedPyProcServiceServer
// for forward compatibility.
//
// PyProcService defines the gRPC service for Python worker communication
type PyProcServiceServer interface {
	// Generic call for backward compatibility with existing JSON protocol
	Call(context.Context, *CallRequest) (*CallResponse, error)
	// Health check RPC for worker health monitoring
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedPyProcServiceServer()
}

// UnimplementedPyProcServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPyProcServiceServer struct{}

func (UnimplementedPyProcServiceServer) Call(context.Context, *CallRequest) (*CallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedPyProcServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedPyProcServiceServer) mustEmbedUnimplementedPyProcServiceServer() {}
func (UnimplementedPyProcServiceServer) testEmbeddedByValue()                       {}

// UnsafePyProcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PyProcServiceServer will
// result in compilation errors.
type UnsafePyProcServiceServer interface {
	mustEmbedUnimplementedPyProcServiceServer()
}

func RegisterPyProcServiceServer(s grpc.ServiceRegistrar, srv PyProcServiceServer) {
	// If the following call pancis, it indicates UnimplementedPyProcServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PyProcService_ServiceDesc, srv)
}

func _PyProcService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyProcServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PyProcService_Call_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyProcServiceServer).Call(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PyProcService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyProcServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PyProcService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyProcServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PyProcService_ServiceDesc is the grpc.ServiceDesc for PyProcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PyProcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pyproc.v1.PyProcService",
	HandlerType: (*PyProcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _PyProcService_Call_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _PyProcService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/pyproc.proto",
}
