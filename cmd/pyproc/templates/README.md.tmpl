# {{.ProjectName}}

A PyProc-based application for high-performance Go-Python integration.

## Features

- High-performance IPC using Unix domain sockets
- Request multiplexing for concurrent operations
- Built-in connection pooling and health monitoring
- Support for multiple JSON codecs (stdlib, orjson, msgspec)
- OpenTelemetry tracing support

## Installation

### Prerequisites

- Go 1.21 or later
- Python 3.9 or later

### Setup

1. Install Go dependencies:
```bash
go mod tidy
```

2. Install Python dependencies:
```bash
pip install -r worker/python/requirements.txt
```

## Usage

### Running the application

```bash
make run
```

### Running tests

```bash
make test
```

### Building for production

```bash
make build
```

## Project Structure

```
{{.ProjectName}}/
├── cmd/app/           # Go application entry point
├── worker/python/     # Python worker implementation
├── api/              # API definitions and types
├── Makefile          # Build and run commands
└── README.md         # This file
```

## Configuration

The application can be configured using environment variables:

- `PYPROC_NUM_WORKERS`: Number of Python worker processes (default: 2)
- `PYPROC_SOCKET_PREFIX`: Unix socket path prefix (default: /tmp/{{.ProjectName}})
- `PYPROC_CODEC_TYPE`: Codec type to use (auto, json, orjson, msgspec)
- `PYPROC_TRACING_ENABLED`: Enable OpenTelemetry tracing (true/false)

## Performance

PyProc achieves sub-millisecond latencies for Go-Python communication:

- p50 latency: < 100µs
- p99 latency: < 500µs
- Throughput: > 10,000 requests/second per worker

## License

[Your License Here]